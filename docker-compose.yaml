version: '3.8'
services:
  db:
    image: postgres:14.6-alpine
    restart: always
    env_file: .env
    environment:


      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      #докер берет переменные окружения из .env
    volumes:
      - diploma_pg_data_1:/var/lib/postgresql/data/ #здесь записываем в том данные
    ports:
      - "5432:5432"
    healthcheck: #проверка того, что у нас приложение здорово, принимает пользователя и базу
      test: pg_isready -U postgres -d postgres
      timeout: 3s #даем время прогрузиться
      retries: 10
      interval: 3s
#делаем сборку

  api:
    build: .
    env_file: .env
    #все переменные прочитаются из .env только мы переопределим переменную хоста
    #потому что внутри контейнера нету базу на порту 5432, база этого контейнера находится в другом контейнере
    #и нужно указать адрес этого контейнера
    #адресом выступает его название (db - это название SERVICE в запущенном контейнере докера)
    #и переопределяем POSTRGES_HOST
    environment:
      POSTGRES_HOST: db
    depends_on:
      db:
        condition: service_healthy
      #пробрасыаем нанужу порты для разработки
      #по какой команде будет запускаться - если бы прописали gunicorn, то он бы не перезапускался после изменений в коде
    #command: python manage.py runserver 0:0:0:8000
    ports:
      - "8000:8000"
    #чтобы сервр запускаля автоматичски постоянно при изменении кода (пробрасывал изменения внутрь контейнера)
    volumes:
      - ./core:/opt/core
      - ./todolist:/opt/todolist
      - django_static:/opt/static
  frontend:
    image: sermalenk/skypro-front:lesson-36
    ports:
      - "80:80"
    depends_on:
      api:
        condition: service_started
    volumes:
       - ./deploy/nginx.conf:/etc/nginx/conf.d/default.conf #пробрасыаем тот путь, откуда мы его забрали
       - django_static:/usr/share/nginx/html/static #сюда мы положим статику

volumes:
  diploma_pg_data_1: #здесь мы создаем том
  django_static:
